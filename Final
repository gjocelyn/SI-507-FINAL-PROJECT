from bs4 import BeautifulSoup
import requests
import json
import time
import webbrowser
import plotly
import plotly.graph_objects as go
import plotly.figure_factory as ff

API_KEY = '9Y8Kd_UGYAaiGegWJYQOWZ8chyPDsEwrLUe2UNjusDzKVZHXz76G1c4tRVFlEg9gl2-SRz-FYPVCi0_KuPAO-mi654JXSnvaFNCZxFTvMul5_ebuIV8fwkbEUPmTY3Yx'
CACHE_f = "yelp.json"
CACHE_dict = {}

YELP_URL_b = "https://api.yelp.com/v3/businesses/search?"
WIKI_URL = "https://en.wikipedia.org/wiki/List_of_United_States_cities_by_population"
MAPBOX_TOKEN = "pk.eyJ1IjoieWloYW4tMTk5OCIsImEiOiJjbGJwaXd6Nm8xYnB3M3BsYnhoejc5dDA0In0._bLAQ_OnH_b9R_Y0SXy2zg"
headers = {'authorization': "Bearer " + API_KEY}

def read_json(filepath, encoding='utf-8'):
    """Reads a JSON document, decodes the file content, and returns a list or dictionary if
    provided with a valid filepath.

    Parameters:
    ----------
        filepath: str
            path to file
        encoding: str
            name of encoding used to decode the file

    Returns:
    ----------
        dict/list: dict or list representations of the decoded JSON document
    """

    with open(filepath, 'r', encoding=encoding) as file_obj:
        return json.load(file_obj)

def write_json(filepath, data, encoding='utf-8', ensure_ascii=False, indent=2):
    """Serializes object as JSON. Writes content to the provided filepath.

    Parameters:
    ----------
        filepath: str
            the path to the file
        data: dict/list
            the data to be encoded as JSON and written to the file
        encoding: str
            name of encoding used to encode the file
        ensure_ascii: str 
            if False non-ASCII characters are printed as is;
                            otherwise non-ASCII characters are escaped.
        indent: int
            number of "pretty printed" indention spaces applied to encoded JSON

    Returns:
    ----------
        None
    """

    with open(filepath, 'w', encoding=encoding) as file_obj:
        json.dump(data, file_obj, ensure_ascii=ensure_ascii, indent=indent)

def generate_idx(url, params):
    '''
    repeateable index of api url

    Parameters
    ----------
    url: string
        api url
    params: dict
        value pairs
    
    Returns
    ----------
    string
        repeateable index of api url
    '''
    param_list=[]
    for i in params.keys():
        param_list.append(f"{i}_{params[i]}")
    param_list.sort()
    # print(param_list)
    uniq_idx = url + '+'.join(param_list)
    # print(uniq_idx)
    return uniq_idx

def open_cache():
    ''' Open the cache file if exists and load JSON file into
    the CACHE_DICT dictionary or create a new cache dictionary
    
    Parameters
    ----------
    None
    
    Returns
    ----------
    The opened cache: dict
    '''
    try:
        cache_dict = read_json(CACHE_f)
    except:
        cache_dict = {}
    return cache_dict


def save_cache(cache_dict):
    ''' Save cache to disk
    
    Parameters
    ----------
    cache_dict: dict
    
    Returns
    ----------
    None
    '''
    write_json(CACHE_f, cache_dict)

def request_data(url, params):
    '''Make a request to the Web API
    
    Parameters
    ----------
    url: string
        The API URL
    params: dict
        value pairs
    
    Returns
    -------
    dict

    '''
    response = requests.get(url, params=params, headers=headers)
    return response.json()

def check_data(url, params):
    '''
    Check if cache has unique index (generated by generate_idx)
    If found, return it or send request to API url then save it.

    Parameters
    ----------
    url: string
        API url
    params: dictionary
        value pairs
    
    Returns
    ----------
    dict
        JSON file
    '''
    param_list=[]
    for i in params.keys():
        param_list.append(f"{i}_{params[i]}")
    param_list.sort()
    # print(param_list)
    uniq_idx = url + '+'.join(param_list)

    check_idx=uniq_idx
    if check_idx in CACHE_dict.keys():
        print("It is stored in cache")
        return CACHE_dict[check_idx]
    else:
        print("Request info to web and saving to cache")
        CACHE_dict[check_idx]=requests.get(url, params=params, headers=headers).json()
        save_cache(CACHE_dict)
        return CACHE_dict[check_idx]


def info_tree(info):
    '''
    Function to organize information to a tree.

    Parameters
    ----------
    info: dict
        informarion dictionary from cache or directly requested from yelp api.

    Return
    ----------
    info_tree: list
        list contains information as a tree
    '''

    info_tree = []
    _dict = {}

    for item in info['businesses']:
        _dict = {'name': item["name"], 'attributes': {}}
        _dict['attributes']['url'] = item["url"]
        _dict['attributes']['category'] = item["categories"][0]["alias"]
        _dict['attributes']['rating'] = item["rating"]
        _dict['attributes']['latitude'] = item["coordinates"]["latitude"]
        _dict['attributes']['longitude'] = item["coordinates"]["longitude"]
        try:
            _dict['attributes']['price'] = item["price"]
        except:
            _dict['attributes']['price'] = None
        _dict['attributes']['location'] = item["location"]
        _dict['attributes']['phone'] = item["display_phone"]
        info_tree.append(_dict)
    return info_tree

def price_tree(tr):
    '''
    Use the information from info_tree, organize the price of resturants into a tree

    Parameters
    ----------
    info_tree: list
        list contains information as a tree

    Returns
    ----------
    price_tree: dict
        price tree
    '''

    price_tree = {'$': [], '$$': [], '$$$': [], '$$$$': [], 'No price': []}
    for item in tr:
        if item['attributes']['price'] == '$$$$':
            price_tree['$$$$'].append(item)
        elif item['attributes']['price'] == '$$$':
            price_tree['$$$'].append(item)
        elif item['attributes']['price'] == '$$':
            price_tree['$$'].append(item)
        elif item['attributes']['price'] == '$':
            price_tree['$'].append(item)
        else:
            price_tree['No price'].append(item)
    return price_tree

def rate_tree_node (price_tree):
    '''
    Organize rating information of price tree

    Parameters
    ----------
    pirce_tree: dict
        price tree

    Returns
    ----------
    final_tree: dict
        add rating node into price tree
    '''
    final_tree = {}
    for key in price_tree.keys():
        final_tree[key] = {'above 4': [], 'above 3': [], 'above 2': [], 'below 2':[]}
        for item in price_tree[key]:
            # print(item)
            if  4.0 < item['attributes']['rating'] and item['attributes']['rating'] <= 5.0:
                final_tree[key]['above 4'].append(item)
            elif 3.0 < item['attributes']['rating'] and item['attributes']['rating'] <= 4.0:
                final_tree[key]['above 3'].append(item)
            elif 2.0 < item['attributes']['rating'] and item['attributes']['rating'] <= 3.0:
                final_tree[key]['above 2'].append(item)
            else:
                final_tree[key]['below 2'].append(item)
    return final_tree

def openweb(url):
    webbrowser.open(url, new = 0)

def map_cities(info_tree):
    '''
    show the restaurant map in a city

    Parameters
    ----------
    info_tree: list
        resturant info
    Return
    ----------
    The restaurant map: fig
    '''
    text_list = []
    lat_list = []
    lon_list = []
    rating_list = []
    for rest in info_tree:
        text_list.append("{} ({}) price: {}, rating: {}".format(rest["name"], rest["attributes"]['category'],  rest["attributes"]['price'], rest["attributes"]['rating']))
        lat_list.append(rest["attributes"]['latitude'])
        lon_list.append(rest["attributes"]['longitude'])
        rating_list.append(rest["attributes"]['rating'])
    fig = go.Figure(
        go.Scattermapbox(lat=lat_list, lon=lon_list, mode='markers',
            marker=go.scattermapbox.Marker(size=10, color=rating_list, opacity=0.5, colorbar=dict(title="ratings of resturants")),
            text=text_list))

    layout = dict(autosize=True, hovermode='closest',
        mapbox=go.layout.Mapbox(accesstoken=MAPBOX_TOKEN, bearing=0, center=go.layout.mapbox.Center(lat=(sum(lat_list) / len(lat_list)), lon=(sum(lon_list) / len(lon_list))), pitch=0, zoom=11),
        paper_bgcolor="white", width=1500, height=800)
    fig.update_layout(layout)
    fig.write_html("map.html", auto_open=True)
    return fig

def city_info(num):
    
    '''
    scrapes the wikipedia page and save as a dictionary
    
    Parameters
    ----------
    num: int
        the number of cities you want to get
    
    Returns
    ----------
    city_info: list
        a list of 326 different cities with the organized relevant information
    '''
    
    city_info = []
    url_text = requests.get(WIKI_URL).text
    soup = BeautifulSoup(url_text, 'html.parser')
    list = soup.find('table', class_='wikitable sortable').find('tbody').find_all('tr')[1:]
    for i in range(num):
        td_list = list[i].find_all('td')
        th_list = list[i].find_all('th')
        
        rank=int(th_list[0].text.strip())
        
        city=str(td_list[0].find('a').text.strip())
        
        try:
            state=str(td_list[1].find('a').text.strip())
        except:
            state=td_list[1].text.strip()
            
        population = int(td_list[2].text.strip().replace(',', ''))
        # print(td_list[:])
        # print(td_list[-1].find("span",class_="latitude").text.split()[0][:2])
        latitude = float(td_list[-1].find("span",class_="latitude").text.split()[0][:2])
        longitude = float(td_list[-1].find("span",class_="longitude").text.split()[0][:2])
        area = float(td_list[5].text.strip().split('\xa0')[0].replace(',', ''))
        time.sleep(0.1)
        city = {"rank": rank, "name":city, "state":state, "population": population, "area":area, "latitude":latitude, "longitude": longitude}
        city_info.append(city)
    
    return city_info

if __name__=='__main__':
    CACHE_dict = open_cache()
    print('Hi! Welcome! Please choose a number below to move forward.')
    while True:
        print(' ')
        print("1. See the information of large cities.")
        print("2. Directly search the resturants of a city.")
        input_1 = input("Please enter 1 or 2 or exit: ")
        if input_1.lower() == 'exit':
            exit()
        else:
            try:
                int_input_1 = int(input_1)
                if int_input_1 == 1:
                    number_input = int(input("Please choose the number of cities you want to see:"))
                    city_list = city_info(number_input)
                    for citty in city_list:
                        print(f"[{citty['rank']}] name: {citty['name']}, state: {citty['state']}, population: {citty['population']}, area: {citty['area']}")
                    number_input_2 = int(input("Please choose the city you want to see (input number):"))
                    if (1 <= number_input_2 and number_input_2 <= number_input):
                        location = city_list[number_input_2-1]["name"]
                        url = YELP_URL_b + location
                        param = {
                            'location': location,
                            'term': "food",
                            'limit': 50
                        }
                        data = check_data(url, param)
                        tree_information = info_tree(data)
                        while True:
                            choice_1 = input("Do you want to see the map of this city and the locations of resturants(y or n)?")
                            if choice_1.lower() == 'yes' or choice_1.lower() == 'y':
                                fig = map_cities(tree_information)
                                break
                            elif choice_1.lower() == 'no' or choice_1.lower() == 'n':
                                break
                            else:
                                print("Please try again")
                        
                        while True:
                            choice_2 = input("Do you want search the resturants through Price and Rate?(y or n)")
                            if choice_2.lower() == 'yes' or choice_2.lower() == 'y':
                                rest_chosen = []
                                tree_final = rate_tree_node(price_tree(tree_information))
                                choice_3 = input("Which price level do you wnat to see? ($, $$, $$$, $$$$ or No price)")
                                if choice_3 == '$':
                                    choice_4 = input("Which rate level do you want to see? ('above 4', 'above 3', 'above 2', 'below 2')")
                                    if choice_4 == 'above 4':
                                        for i in tree_final['$']['above 4']: #list
                                            rest_chosen.append(i)
                                    elif choice_4 == 'above 3':
                                        for i in tree_final['$']['above 3']: #list
                                            rest_chosen.append(i)
                                    elif choice_4 == 'above 2':
                                        for i in tree_final['$']['above 2']: #list
                                            rest_chosen.append(i)
                                    else:
                                        for i in tree_final['$']['below 2']: #list
                                            rest_chosen.append(i)
                                if choice_3 == '$$':
                                    choice_4 = input("Which rate level do you want to see? ('above 4', 'above 3', 'above 2', 'below 2')")
                                    if choice_4 == 'above 4':
                                        for i in tree_final['$$']['above 4']: #list
                                            rest_chosen.append(i)
                                    elif choice_4 == 'above 3':
                                        for i in tree_final['$$']['above 3']: #list
                                            rest_chosen.append(i)
                                    elif choice_4 == 'above 2':
                                        for i in tree_final['$$']['above 2']: #list
                                            rest_chosen.append(i)
                                    else:
                                        for i in tree_final['$$']['below 2']: #list
                                            rest_chosen.append(i)
                                if choice_3 == '$$$':
                                    choice_4 = input("Which rate level do you want to see? ('above 4', 'above 3', 'above 2', 'below 2')")
                                    if choice_4 == 'above 4':
                                        for i in tree_final['$$$']['above 4']: #list
                                            rest_chosen.append(i)
                                    elif choice_4 == 'above 3':
                                        for i in tree_final['$$$']['above 3']: #list
                                            rest_chosen.append(i)
                                    elif choice_4 == 'above 2':
                                        for i in tree_final['$$$']['above 2']: #list
                                            rest_chosen.append(i)
                                    else:
                                        for i in tree_final['$$$']['below 2']: #list
                                            rest_chosen.append(i)
                                if choice_3 == '$$$$':
                                    choice_4 = input("Which rate level do you want to see? ('above 4', 'above 3', 'above 2', 'below 2')")
                                    if choice_4 == 'above 4':
                                        for i in tree_final['$$$$']['above 4']: #list
                                            rest_chosen.append(i)
                                    elif choice_4 == 'above 3':
                                        for i in tree_final['$$$$']['above 3']: #list
                                            rest_chosen.append(i)
                                    elif choice_4 == 'above 2':
                                        for i in tree_final['$$$$']['above 2']: #list
                                            rest_chosen.append(i)
                                    else:
                                        for i in tree_final['$$$$']['below 2']: #list
                                            rest_chosen.append(i)
                                elif choice_3.lower() == 'no price':
                                    choice_4 = input("Which rate level do you want to see? ('above 4', 'above 3', 'above 2', 'below 2')")
                                    if choice_4 == 'above 4':
                                        for i in tree_final['No price']['above 4']: #list
                                            rest_chosen.append(i)
                                    elif choice_4 == 'above 3':
                                        for i in tree_final['No price']['above 3']: #list
                                            rest_chosen.append(i)
                                    elif choice_4 == 'above 2':
                                        for i in tree_final['No price']['above 2']: #list
                                            rest_chosen.append(i)
                                    else:
                                        for i in tree_final['No price']['below 2']: #list
                                            rest_chosen.append(i)
                                else:
                                    print('invalid, try again')
                                for i in range(len(rest_chosen)):
                                    print(f"{i}. {rest_chosen[i]['name']}: {rest_chosen[i]['attributes']['category']} - rate:{rest_chosen[i]['attributes']['rating']} - phone:{rest_chosen[i]['attributes']['phone']}")
                                if(len(rest_chosen) > 0):
                                    choice_5 = int(input('please input a num of resturant which you want to see the website:'))
                                    openweb(rest_chosen[choice_5]['attributes']['url'])
                                else:
                                    print('There is no resualt')
                            elif choice_2.lower() == 'no' or choice_2.lower() == 'n':
                                break
                            else:
                                print("Please try again")
                    else:
                        print("Invalid, please try again")
                elif int_input_1 == 2:
                    location = input("Please enter the city you want to check:") # NYU
                    url = YELP_URL_b + location
                    param = {
                        'location': location,
                        'term': "food",
                        'limit': 100
                    }
                    data = check_data(url, param)
                    tree_information = info_tree(data)
                    while True:
                        choice_1 = input("Do you want to see the map of this city and the locations of resturants(y or n)?")
                        if choice_1.lower() == 'yes' or choice_1.lower() == 'y':
                            fig = map_cities(tree_information)
                            break
                        elif choice_1.lower() == 'no' or choice_1.lower() == 'n':
                            break
                        else:
                            print("Please try again")
                    
                    while True:
                        choice_2 = input("Do you want search the resturants through Price and Rate?(y or n)")
                        if choice_2.lower() == 'yes' or choice_2.lower() == 'y':
                            rest_chosen = []
                            tree_final = rate_tree_node(price_tree(tree_information))
                            # print("/////////////////////////")
                            choice_3 = input("Which price level do you wnat to see? ($, $$, $$$, $$$$ or No price)")
                            if choice_3 == '$':
                                choice_4 = input("Which rate level do you want to see? ('above 4', 'above 3', 'above 2', 'below 2')")
                                if choice_4 == 'above 4':
                                    for i in tree_final['$']['above 4']: #list
                                        rest_chosen.append(i)
                                elif choice_4 == 'above 3':
                                    for i in tree_final['$']['above 3']: #list
                                        rest_chosen.append(i)
                                elif choice_4 == 'above 2':
                                    for i in tree_final['$']['above 2']: #list
                                        rest_chosen.append(i)
                                else:
                                    for i in tree_final['$']['below 2']: #list
                                        rest_chosen.append(i)
                            if choice_3 == '$$':
                                choice_4 = input("Which rate level do you want to see? ('above 4', 'above 3', 'above 2', 'below 2')")
                                if choice_4 == 'above 4':
                                    for i in tree_final['$$']['above 4']: #list
                                        rest_chosen.append(i)
                                elif choice_4 == 'above 3':
                                    for i in tree_final['$$']['above 3']: #list
                                        rest_chosen.append(i)
                                elif choice_4 == 'above 2':
                                    for i in tree_final['$$']['above 2']: #list
                                        rest_chosen.append(i)
                                else:
                                    for i in tree_final['$$']['below 2']: #list
                                        rest_chosen.append(i)
                            if choice_3 == '$$$':
                                choice_4 = input("Which rate level do you want to see? ('above 4', 'above 3', 'above 2', 'below 2')")
                                if choice_4 == 'above 4':
                                    for i in tree_final['$$$']['above 4']: #list
                                        rest_chosen.append(i)
                                elif choice_4 == 'above 3':
                                    for i in tree_final['$$$']['above 3']: #list
                                        rest_chosen.append(i)
                                elif choice_4 == 'above 2':
                                    for i in tree_final['$$$']['above 2']: #list
                                        rest_chosen.append(i)
                                else:
                                    for i in tree_final['$$$']['below 2']: #list
                                        rest_chosen.append(i)
                            if choice_3 == '$$$$':
                                choice_4 = input("Which rate level do you want to see? ('above 4', 'above 3', 'above 2', 'below 2')")
                                if choice_4 == 'above 4':
                                    for i in tree_final['$$$$']['above 4']: #list
                                        rest_chosen.append(i)
                                elif choice_4 == 'above 3':
                                    for i in tree_final['$$$$']['above 3']: #list
                                        rest_chosen.append(i)
                                elif choice_4 == 'above 2':
                                    for i in tree_final['$$$$']['above 2']: #list
                                        rest_chosen.append(i)
                                else:
                                    for i in tree_final['$$$$']['below 2']: #list
                                        rest_chosen.append(i)
                            elif choice_3.lower() == 'no price':
                                choice_4 = input("Which rate level do you want to see? ('above 4', 'above 3', 'above 2', 'below 2')")
                                if choice_4 == 'above 4':
                                    for i in tree_final['No price']['above 4']: #list
                                        rest_chosen.append(i)
                                elif choice_4 == 'above 3':
                                    for i in tree_final['No price']['above 3']: #list
                                        rest_chosen.append(i)
                                elif choice_4 == 'above 2':
                                    for i in tree_final['No price']['above 2']: #list
                                        rest_chosen.append(i)
                                else:
                                    for i in tree_final['No price']['below 2']: #list
                                        rest_chosen.append(i)
                            else:
                                print('invalid, try again')
                            for i in range(len(rest_chosen)):
                                print(f"{i}. {rest_chosen[i]['name']}: {rest_chosen[i]['attributes']['category']} - rate:{rest_chosen[i]['attributes']['rating']} - phone:{rest_chosen[i]['attributes']['phone']}")
                            if(len(rest_chosen) > 0):
                                choice_5 = int(input('please input a num of resturant which you want to see the website:'))
                                openweb(rest_chosen[choice_5]['attributes']['url'])
                            else:
                                print('There is no resualt')
                        elif choice_2.lower() == 'no' or choice_2.lower() == 'n':
                            break
                        else:
                            print("Please try again")
                else:
                    print("Please input a number between 1 and 2")
            except:
                print('Please input a valid answer')
    
    # location = input("Please enter the city you want to check:") # NYU
    # url = YELP_URL_b + location
    # param = {
    #     'location': location,
    #     'term': "food",
    #     'limit': 50
    # }
    # data = check_data(url, param)
    # tree_in = info_tree(data)
    # print(rate_tree_node(price_tree(tree_in)))
    # fig = map_cities(info_tree)
    # print(city_info())